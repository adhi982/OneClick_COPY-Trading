## 2. Database (PostgreSQL + Redis)

### Purpose
Store all application data with fast caching for real-time features.

### PostgreSQL Tables

#### Users Table
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    wallet_address VARCHAR(66) UNIQUE NOT NULL,
    username VARCHAR(50) UNIQUE,
    email VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

#### Traders Table
```sql
CREATE TABLE traders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    display_name VARCHAR(100),
    bio TEXT,
    strategy_description TEXT,
    performance_data JSONB,
    risk_level VARCHAR(20) DEFAULT 'medium',
    is_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);
```

#### Copy_Settings Table
```sql
CREATE TABLE copy_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    follower_id UUID REFERENCES users(id),
    trader_id UUID REFERENCES traders(id),
    allocation_amount DECIMAL(20,8),
    max_position_size DECIMAL(20,8),
    stop_loss_percentage DECIMAL(5,2),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW()
);
```

#### Trades Table
```sql
CREATE TABLE trades (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    trader_id UUID REFERENCES traders(id),
    follower_id UUID REFERENCES users(id),
    symbol VARCHAR(20),
    side VARCHAR(10), -- 'buy' or 'sell'
    amount DECIMAL(20,8),
    price DECIMAL(20,8),
    transaction_hash VARCHAR(66),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT NOW()
);
```

#### Portfolio Table
```sql
CREATE TABLE portfolios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    total_value DECIMAL(20,8),
    daily_pnl DECIMAL(20,8),
    monthly_return DECIMAL(5,2),
    risk_score DECIMAL(3,1),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

### Redis Caching
```javascript
// Cache frequently accessed data
const cacheKeys = {
    marketPrices: 'market:prices',
    traderStats: 'trader:stats:',
    userPortfolio: 'portfolio:',
    leaderboard: 'community:leaderboard',
    sentiment: 'market:sentiment'
};

// Cache for 30 seconds to 5 minutes depending on data type
```

### Database Connections
```javascript
// PostgreSQL connection
const { Pool } = require('pg');
const pool = new Pool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    database: process.env.DB_NAME,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD
});

// Redis connection
const redis = require('redis');
const client = redis.createClient({
    host: process.env.REDIS_HOST,
    port: process.env.REDIS_PORT
});
```

---