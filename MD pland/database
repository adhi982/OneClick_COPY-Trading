## 2. Database (Supabase + Redis)

### Purpose
Store all application data using Supabase (PostgreSQL with built-in APIs) and Redis for caching real-time features.

### Why Supabase?
- Built-in REST and GraphQL APIs
- Real-time subscriptions
- Row Level Security (RLS)
- Built-in authentication (complementing Firebase Auth)
- Auto-generated TypeScript types
- Edge functions support
- Built-in file storage

### Supabase Database Tables

#### Users Table (Extended for Social Features)
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    firebase_uid VARCHAR(128) UNIQUE NOT NULL, -- Firebase Auth UID
    wallet_address VARCHAR(66) UNIQUE,
    username VARCHAR(50) UNIQUE,
    email VARCHAR(255),
    display_name VARCHAR(100),
    avatar_url TEXT,
    bio TEXT,
    country VARCHAR(3),
    timezone VARCHAR(50),
    email_verified BOOLEAN DEFAULT FALSE,
    phone_verified BOOLEAN DEFAULT FALSE,
    verification_badge BOOLEAN DEFAULT FALSE,
    account_status VARCHAR(20) DEFAULT 'active', -- active, suspended, banned
    subscription_tier VARCHAR(20) DEFAULT 'free', -- free, basic, premium, vip
    total_followers INTEGER DEFAULT 0,
    total_following INTEGER DEFAULT 0,
    trading_experience VARCHAR(20) DEFAULT 'beginner', -- beginner, intermediate, advanced, expert
    risk_tolerance VARCHAR(10) DEFAULT 'medium', -- low, medium, high
    preferred_assets JSONB DEFAULT '[]',
    social_links JSONB DEFAULT '{}',
    achievements JSONB DEFAULT '[]',
    notification_settings JSONB DEFAULT '{"email": true, "push": true, "sms": false}',
    privacy_settings JSONB DEFAULT '{"profile_public": true, "trades_public": false}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_login_at TIMESTAMP WITH TIME ZONE
);

-- Enable RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Users can only see their own data unless profile is public
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid()::text = firebase_uid);

CREATE POLICY "Public profiles are viewable" ON users
    FOR SELECT USING ((privacy_settings->>'profile_public')::boolean = true);
```

#### Traders Table (Enhanced for Community)
```sql
CREATE TABLE traders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    display_name VARCHAR(100),
    bio TEXT,
    strategy_description TEXT,
    performance_data JSONB DEFAULT '{}',
    risk_level VARCHAR(20) DEFAULT 'medium',
    is_verified BOOLEAN DEFAULT FALSE,
    verification_date TIMESTAMP WITH TIME ZONE,
    total_followers INTEGER DEFAULT 0,
    total_aum DECIMAL(20,8) DEFAULT 0,
    performance_fee DECIMAL(5,2) DEFAULT 0, -- Percentage
    win_rate DECIMAL(5,2) DEFAULT 0,
    avg_return DECIMAL(10,4) DEFAULT 0,
    max_drawdown DECIMAL(10,4) DEFAULT 0,
    sharpe_ratio DECIMAL(10,4) DEFAULT 0,
    total_trades INTEGER DEFAULT 0,
    successful_trades INTEGER DEFAULT 0,
    trading_style VARCHAR(50), -- scalping, day_trading, swing, long_term
    preferred_markets JSONB DEFAULT '[]',
    is_accepting_followers BOOLEAN DEFAULT TRUE,
    min_follow_amount DECIMAL(20,8) DEFAULT 0,
    max_followers INTEGER,
    social_proof JSONB DEFAULT '{}', -- Links to verified accounts
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE traders ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Traders can manage own profile" ON traders
    FOR ALL USING (user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));

CREATE POLICY "Public trader profiles viewable" ON traders
    FOR SELECT USING (true);
```

#### Premium Channels Table
```sql
CREATE TABLE premium_channels (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    creator_id UUID REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    banner_url TEXT,
    category VARCHAR(50),
    tags JSONB DEFAULT '[]',
    pricing_monthly DECIMAL(10,2) NOT NULL,
    pricing_yearly DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'USD',
    subscription_tier VARCHAR(20) DEFAULT 'basic', -- basic, premium, vip
    is_active BOOLEAN DEFAULT TRUE,
    is_featured BOOLEAN DEFAULT FALSE,
    subscriber_count INTEGER DEFAULT 0,
    total_signals INTEGER DEFAULT 0,
    success_rate DECIMAL(5,2) DEFAULT 0,
    avg_return_percentage DECIMAL(10,4) DEFAULT 0,
    channel_rules TEXT,
    welcome_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE premium_channels ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Channel creators can manage" ON premium_channels
    FOR ALL USING (creator_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));

CREATE POLICY "Active channels viewable" ON premium_channels
    FOR SELECT USING (is_active = TRUE);
```

#### Subscriptions Table
```sql
CREATE TABLE subscriptions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    channel_id UUID REFERENCES premium_channels(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'active', -- active, cancelled, expired, pending
    billing_cycle VARCHAR(10) DEFAULT 'monthly', -- monthly, yearly
    amount_paid DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    start_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    end_date TIMESTAMP WITH TIME ZONE,
    next_billing_date TIMESTAMP WITH TIME ZONE,
    auto_renew BOOLEAN DEFAULT TRUE,
    payment_method VARCHAR(20), -- stripe, paypal, crypto
    stripe_subscription_id VARCHAR(255),
    cancellation_reason TEXT,
    cancelled_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, channel_id)
);

ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own subscriptions" ON subscriptions
    FOR SELECT USING (user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));
```

#### Community Posts Table
```sql
CREATE TABLE community_posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    channel_id UUID REFERENCES premium_channels(id) ON DELETE SET NULL,
    post_type VARCHAR(20) DEFAULT 'discussion', -- trade, analysis, discussion, signal
    title VARCHAR(255),
    content TEXT NOT NULL,
    media_urls JSONB DEFAULT '[]',
    trade_data JSONB, -- For trade posts: symbol, side, price, quantity, reasoning
    tags JSONB DEFAULT '[]',
    visibility VARCHAR(20) DEFAULT 'public', -- public, subscribers_only, followers_only
    is_pinned BOOLEAN DEFAULT FALSE,
    likes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    shares_count INTEGER DEFAULT 0,
    views_count INTEGER DEFAULT 0,
    sentiment_score DECIMAL(5,4), -- AI-calculated sentiment
    is_flagged BOOLEAN DEFAULT FALSE,
    flagged_reason TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Index for performance
CREATE INDEX idx_community_posts_user_created ON community_posts(user_id, created_at DESC);
CREATE INDEX idx_community_posts_channel_created ON community_posts(channel_id, created_at DESC);
CREATE INDEX idx_community_posts_type_created ON community_posts(post_type, created_at DESC);

ALTER TABLE community_posts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Posts visible based on visibility setting" ON community_posts
    FOR SELECT USING (
        visibility = 'public' OR
        (visibility = 'followers_only' AND user_id IN (
            SELECT following_id FROM user_follows 
            WHERE follower_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text)
        )) OR
        (visibility = 'subscribers_only' AND channel_id IN (
            SELECT channel_id FROM subscriptions 
            WHERE user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text) 
            AND status = 'active'
        ))
    );
```

#### Trading Signals Table
```sql
CREATE TABLE trading_signals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    channel_id UUID REFERENCES premium_channels(id) ON DELETE CASCADE,
    creator_id UUID REFERENCES users(id) ON DELETE CASCADE,
    signal_type VARCHAR(10) NOT NULL, -- buy, sell, hold
    asset_symbol VARCHAR(20) NOT NULL,
    entry_price DECIMAL(20,8),
    current_price DECIMAL(20,8),
    stop_loss DECIMAL(20,8),
    take_profit DECIMAL(20,8),
    quantity_suggestion DECIMAL(20,8),
    confidence_level INTEGER CHECK (confidence_level >= 1 AND confidence_level <= 10),
    timeframe VARCHAR(20), -- 1m, 5m, 15m, 1h, 4h, 1d
    reasoning TEXT,
    status VARCHAR(20) DEFAULT 'active', -- active, closed, cancelled, expired
    performance_percentage DECIMAL(10,4),
    followers_count INTEGER DEFAULT 0,
    copies_count INTEGER DEFAULT 0,
    max_risk_percentage DECIMAL(5,2),
    target_audience VARCHAR(20) DEFAULT 'all', -- beginners, intermediate, advanced, all
    expires_at TIMESTAMP WITH TIME ZONE,
    closed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Index for performance
CREATE INDEX idx_trading_signals_channel_created ON trading_signals(channel_id, created_at DESC);
CREATE INDEX idx_trading_signals_status_symbol ON trading_signals(status, asset_symbol);

ALTER TABLE trading_signals ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Signals visible to channel subscribers" ON trading_signals
    FOR SELECT USING (
        channel_id IN (
            SELECT channel_id FROM subscriptions 
            WHERE user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text) 
            AND status = 'active'
        ) OR
        creator_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text)
    );
```

#### Copy Settings Table
```sql
CREATE TABLE copy_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
    trader_id UUID REFERENCES traders(id) ON DELETE CASCADE,
    allocation_amount DECIMAL(20,8) NOT NULL,
    max_position_size DECIMAL(20,8),
    stop_loss_percentage DECIMAL(5,2),
    take_profit_percentage DECIMAL(5,2),
    max_daily_loss DECIMAL(20,8),
    copy_percentage DECIMAL(5,2) DEFAULT 100, -- What % of trader's position to copy
    min_trade_amount DECIMAL(20,8),
    max_trade_amount DECIMAL(20,8),
    allowed_symbols JSONB DEFAULT '[]', -- Empty array means all symbols allowed
    excluded_symbols JSONB DEFAULT '[]',
    trading_hours JSONB DEFAULT '{"start": "00:00", "end": "23:59", "timezone": "UTC"}',
    is_active BOOLEAN DEFAULT TRUE,
    auto_rebalance BOOLEAN DEFAULT FALSE,
    risk_level VARCHAR(10) DEFAULT 'medium',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(follower_id, trader_id)
);

ALTER TABLE copy_settings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users manage own copy settings" ON copy_settings
    FOR ALL USING (follower_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));
```

#### Trades Table (Enhanced)
```sql
CREATE TABLE trades (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    trader_id UUID REFERENCES traders(id) ON DELETE SET NULL,
    follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
    signal_id UUID REFERENCES trading_signals(id) ON DELETE SET NULL,
    copy_setting_id UUID REFERENCES copy_settings(id) ON DELETE SET NULL,
    symbol VARCHAR(20) NOT NULL,
    side VARCHAR(10) NOT NULL, -- buy, sell
    trade_type VARCHAR(20) DEFAULT 'market', -- market, limit, stop
    amount DECIMAL(20,8) NOT NULL,
    price DECIMAL(20,8),
    executed_price DECIMAL(20,8),
    executed_amount DECIMAL(20,8),
    stop_loss DECIMAL(20,8),
    take_profit DECIMAL(20,8),
    fees DECIMAL(20,8) DEFAULT 0,
    exchange_name VARCHAR(50),
    exchange_order_id VARCHAR(255),
    transaction_hash VARCHAR(66),
    status VARCHAR(20) DEFAULT 'pending', -- pending, filled, partially_filled, cancelled, failed
    source VARCHAR(20) DEFAULT 'manual', -- manual, copy_trade, signal, bot
    pnl_usd DECIMAL(20,8),
    pnl_percentage DECIMAL(10,4),
    execution_time TIMESTAMP WITH TIME ZONE,
    error_message TEXT,
    metadata JSONB DEFAULT '{}', -- Additional trade data
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_trades_user_created ON trades(follower_id, created_at DESC);
CREATE INDEX idx_trades_trader_created ON trades(trader_id, created_at DESC);
CREATE INDEX idx_trades_symbol_created ON trades(symbol, created_at DESC);
CREATE INDEX idx_trades_status ON trades(status);

ALTER TABLE trades ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own trades" ON trades
    FOR SELECT USING (
        follower_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text) OR
        trader_id IN (SELECT id FROM traders WHERE user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text))
    );
```

#### Portfolios Table (Enhanced)
```sql
CREATE TABLE portfolios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(100) DEFAULT 'Main Portfolio',
    description TEXT,
    total_value_usd DECIMAL(20,8) DEFAULT 0,
    invested_amount_usd DECIMAL(20,8) DEFAULT 0,
    available_balance_usd DECIMAL(20,8) DEFAULT 0,
    daily_pnl_usd DECIMAL(20,8) DEFAULT 0,
    daily_pnl_percentage DECIMAL(10,4) DEFAULT 0,
    weekly_return DECIMAL(10,4) DEFAULT 0,
    monthly_return DECIMAL(10,4) DEFAULT 0,
    yearly_return DECIMAL(10,4) DEFAULT 0,
    all_time_return DECIMAL(10,4) DEFAULT 0,
    max_drawdown DECIMAL(10,4) DEFAULT 0,
    sharpe_ratio DECIMAL(10,4),
    risk_score DECIMAL(3,1) DEFAULT 0,
    volatility DECIMAL(10,4),
    total_trades INTEGER DEFAULT 0,
    winning_trades INTEGER DEFAULT 0,
    losing_trades INTEGER DEFAULT 0,
    win_rate DECIMAL(5,2) DEFAULT 0,
    avg_win_amount DECIMAL(20,8) DEFAULT 0,
    avg_loss_amount DECIMAL(20,8) DEFAULT 0,
    largest_win DECIMAL(20,8) DEFAULT 0,
    largest_loss DECIMAL(20,8) DEFAULT 0,
    is_default BOOLEAN DEFAULT TRUE,
    is_public BOOLEAN DEFAULT FALSE,
    currency VARCHAR(3) DEFAULT 'USD',
    last_rebalanced_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

ALTER TABLE portfolios ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users manage own portfolios" ON portfolios
    FOR ALL USING (user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));

CREATE POLICY "Public portfolios viewable" ON portfolios
    FOR SELECT USING (is_public = TRUE);
```

#### User Follows Table
```sql
CREATE TABLE user_follows (
    follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
    following_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    PRIMARY KEY (follower_id, following_id),
    CHECK (follower_id != following_id)
);

ALTER TABLE user_follows ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users manage own follows" ON user_follows
    FOR ALL USING (follower_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));
```

#### Post Likes Table
```sql
CREATE TABLE post_likes (
    post_id UUID REFERENCES community_posts(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    PRIMARY KEY (post_id, user_id)
);

ALTER TABLE post_likes ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users manage own likes" ON post_likes
    FOR ALL USING (user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));
```

#### Notifications Table
```sql
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL, -- trade_alert, signal_update, community_interaction, subscription
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    data JSONB DEFAULT '{}',
    is_read BOOLEAN DEFAULT FALSE,
    priority VARCHAR(10) DEFAULT 'normal', -- low, normal, high, urgent
    delivery_method JSONB DEFAULT '["push"]', -- push, email, sms
    related_id UUID, -- ID of related entity (trade, post, etc.)
    action_url TEXT,
    expires_at TIMESTAMP WITH TIME ZONE,
    read_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Index for performance
CREATE INDEX idx_notifications_user_created ON notifications(user_id, created_at DESC);
CREATE INDEX idx_notifications_user_unread ON notifications(user_id, is_read, created_at DESC);

ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users view own notifications" ON notifications
    FOR SELECT USING (user_id IN (SELECT id FROM users WHERE firebase_uid = auth.uid()::text));
```

### Redis Caching Strategy
```javascript
// Cache structure for high-performance real-time data
const cacheKeys = {
    // Market data (30 seconds TTL)
    marketPrices: 'market:prices:{symbol}',
    marketSentiment: 'market:sentiment',
    topGainers: 'market:gainers',
    topLosers: 'market:losers',
    
    // User data (5 minutes TTL)
    userPortfolio: 'portfolio:{userId}',
    userSettings: 'settings:{userId}',
    userNotifications: 'notifications:{userId}:unread',
    
    // Trading data (1 minute TTL)
    traderStats: 'trader:stats:{traderId}',
    activeSignals: 'signals:active:{channelId}',
    recentTrades: 'trades:recent:{userId}',
    
    // Community data (2 minutes TTL)
    leaderboard: 'community:leaderboard',
    trendingPosts: 'posts:trending',
    channelMembers: 'channel:{channelId}:members',
    
    // Real-time data (10 seconds TTL)
    liveSignals: 'signals:live',
    activeTrades: 'trades:active',
    onlineUsers: 'users:online'
};

// Redis configuration for optimal performance
const redisConfig = {
    host: process.env.REDIS_HOST,
    port: process.env.REDIS_PORT,
    password: process.env.REDIS_PASSWORD,
    db: 0,
    maxRetriesPerRequest: 3,
    retryDelayOnFailover: 100,
    lazyConnect: true,
    keepAlive: 30000,
    family: 4,
    connectTimeout: 10000,
    commandTimeout: 5000
};
```

### Supabase Configuration
```javascript
// Supabase client configuration
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Server-side only

// Client-side Supabase client
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true
    },
    realtime: {
        params: {
            eventsPerSecond: 10
        }
    }
});

// Server-side Supabase client (with service role key)
export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});
```

### Real-time Subscriptions
```javascript
// Real-time subscriptions for live updates
const subscriptions = {
    // Live price updates
    subscribeToPrices: (symbols: string[], callback: Function) => {
        return supabase
            .channel('price-updates')
            .on('postgres_changes', 
                { event: '*', schema: 'public', table: 'market_data' },
                callback
            )
            .subscribe();
    },
    
    // New trading signals
    subscribeToSignals: (channelId: string, callback: Function) => {
        return supabase
            .channel(`signals-${channelId}`)
            .on('postgres_changes',
                { 
                    event: 'INSERT', 
                    schema: 'public', 
                    table: 'trading_signals',
                    filter: `channel_id=eq.${channelId}`
                },
                callback
            )
            .subscribe();
    },
    
    // Community posts updates
    subscribeToPosts: (callback: Function) => {
        return supabase
            .channel('community-posts')
            .on('postgres_changes',
                { event: '*', schema: 'public', table: 'community_posts' },
                callback
            )
            .subscribe();
    },
    
    // User notifications
    subscribeToNotifications: (userId: string, callback: Function) => {
        return supabase
            .channel(`notifications-${userId}`)
            .on('postgres_changes',
                { 
                    event: 'INSERT', 
                    schema: 'public', 
                    table: 'notifications',
                    filter: `user_id=eq.${userId}`
                },
                callback
            )
            .subscribe();
    }
};
```

### Database Functions (PostgreSQL)
```sql
-- Function to update trader statistics
CREATE OR REPLACE FUNCTION update_trader_stats(trader_uuid UUID)
RETURNS void AS $$
BEGIN
    UPDATE traders SET
        total_trades = (SELECT COUNT(*) FROM trades WHERE trader_id = trader_uuid),
        successful_trades = (SELECT COUNT(*) FROM trades WHERE trader_id = trader_uuid AND pnl_usd > 0),
        win_rate = CASE 
            WHEN (SELECT COUNT(*) FROM trades WHERE trader_id = trader_uuid) > 0 
            THEN (SELECT COUNT(*)::decimal FROM trades WHERE trader_id = trader_uuid AND pnl_usd > 0) * 100 / 
                 (SELECT COUNT(*) FROM trades WHERE trader_id = trader_uuid)
            ELSE 0
        END,
        avg_return = (SELECT AVG(pnl_percentage) FROM trades WHERE trader_id = trader_uuid AND pnl_percentage IS NOT NULL),
        updated_at = NOW()
    WHERE id = trader_uuid;
END;
$$ LANGUAGE plpgsql;

-- Function to calculate portfolio performance
CREATE OR REPLACE FUNCTION calculate_portfolio_performance(user_uuid UUID)
RETURNS void AS $$
DECLARE
    total_invested DECIMAL(20,8);
    current_value DECIMAL(20,8);
    daily_change DECIMAL(20,8);
BEGIN
    -- Calculate portfolio metrics
    SELECT 
        COALESCE(SUM(CASE WHEN side = 'buy' THEN amount * executed_price ELSE -amount * executed_price END), 0),
        COALESCE(SUM(CASE WHEN pnl_usd IS NOT NULL THEN pnl_usd ELSE 0 END), 0)
    INTO total_invested, daily_change
    FROM trades 
    WHERE follower_id = user_uuid AND status = 'filled';
    
    current_value := total_invested + daily_change;
    
    UPDATE portfolios SET
        invested_amount_usd = total_invested,
        total_value_usd = current_value,
        daily_pnl_usd = daily_change,
        daily_pnl_percentage = CASE 
            WHEN total_invested > 0 THEN (daily_change / total_invested) * 100 
            ELSE 0 
        END,
        updated_at = NOW()
    WHERE user_id = user_uuid;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update stats automatically
CREATE OR REPLACE FUNCTION trigger_update_stats()
RETURNS TRIGGER AS $$
BEGIN
    -- Update trader stats
    IF NEW.trader_id IS NOT NULL THEN
        PERFORM update_trader_stats(NEW.trader_id);
    END IF;
    
    -- Update portfolio performance
    PERFORM calculate_portfolio_performance(NEW.follower_id);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trades_update_stats_trigger
    AFTER INSERT OR UPDATE ON trades
    FOR EACH ROW
    EXECUTE FUNCTION trigger_update_stats();
```

---